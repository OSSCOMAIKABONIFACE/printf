#include "main.h"

/**
 * print_char - Prints a single character
 * @args: List of arguments
 * @buffer: Buffer array to handle print
 * @flags:  Calculates active flags
 * @width: Width
 * @precision: Precision specification
 * @size: Size specifier
 * Return: Number of characters printed
 */
int print_char(va_list args, char buffer[],
	int flags, int width, int precision, int size)
{
	char c = va_arg(args, int);

	return (handle_write_char(c, buffer, flags, width, precision, size));
}

/**
 * print_string - Prints a string
 * @args: List of arguments
 * @buffer: Buffer array to handle print
 * @flags: Calculates active flags
 * @width: Width
 * @precision: Precision specification
 * @size: Size specifier
 * Return: Number of characters printed
 */
int print_string(va_list args, char buffer[],
	int flags, int width, int precision, int size)
{
	int length = 0, i = 0;
	char *str = va_arg(args, char *);

	UNUSED(buffer);
	UNUSED(flags);
	UNUSED(width);
	UNUSED(precision);
	UNUSED(size);

	// If the string is NULL, set it to "(null)" or "      " if the precision is >= 6
	if (str == NULL)
	{
		str = "(null)";
		if (precision >= 6)
			str = "      ";
	}

	// Calculate the length of the string
	while (str[length] != '\0')
		length++;

	// Truncate the string if precision is specified
	if (precision >= 0 && precision < length)
		length = precision;

	// Pad the string with spaces if width is specified
	if (width > length)
	{
		if (flags & F_MINUS)
		{
			// Left-justify the string
			write(1, &str[0], length);
			while (i++ < width - length)
				write(1, " ", 1);
			return (width);
		}
		else
		{
			// Right-justify the string
			while (i++ < width - length)
				write(1, " ", 1);
			write(1, &str[0], length);
			return (width);
		}
	}

	// Print the string
	return (write(1, str, length));
}

/**
 * print_percent - Prints a percent sign
 * @args: List of arguments
 * @buffer: Buffer array to handle print
 * @flags: Calculates active flags
 * @width: Width
 * @precision: Precision specification
 * @size: Size specifier
 * Return: Number of characters printed
 */
int print_percent(va_list args, char buffer[],
	int flags, int width, int precision, int size)
{
	UNUSED(args);
	UNUSED(buffer);
	UNUSED(flags);
	UNUSED(width);
	UNUSED(precision);
	UNUSED(size);
	return (write(1, "%%", 1));
}

/**
 * print_integer - Prints an integer number
 * @args: List of arguments
 * @buffer: Buffer array to handle print
 * @flags: Calculates active flags
 * @width: Width specification
 * @precision: Precision specification
 * @size: Size specifier
 * Return: Number of chars printed
 */
int print_integer(va_list args, char buffer[],
                 int flags, int width, int precision, int size)
{
    int i = BUFFER_SIZE - 2;
    int is_negative = 0;
    long int n = va_arg(args, long int);
    unsigned long int num;

    n = convert_size_number(n, size);

    if (n == 0)
        buffer[i--] = '0';

    buffer[BUFFER_SIZE - 1] = '\0';
    num = (unsigned long int)n;

    if (n < 0)
    {
        num = (unsigned long int)((-1) * n);
        is_negative = 1;
    }

    // Extract digits from the number and store them in the buffer in reverse order
    while (num > 0)
    {
        buffer[i--] = (num % 10) + '0';
        num /= 10;
    }

    // Adjust the index to point to the first digit
    i++;

    // Write the number to stdout
    return (write_number(is_negative, i, buffer, flags, width, precision, size));
}

/**
 * print_binary - Prints a binary number
 * @args: List of arguments
 * @buffer: Buffer array to handle print
 * @flags: Calculates active flags
 * @width: Width specification
 * @precision: Precision specification
 * @size: Size specifier
 * Return: Number of chars printed
 */
int print_binary(va_list args, char buffer[],
                int flags, int width, int precision, int size)
{
    unsigned int n = va_arg(args, unsigned int);
    unsigned int m = 2147483648; /* (2 ^ 31) */
    unsigned int binary_digits[32];
    int count = 0;

    // Convert the number to binary and store the binary digits in an array
    binary_digits[0] = n / m;
    for (int i = 1; i < 32; i++)
    {
        m /= 2;
        binary_digits[i] = (n / m) % 2;
    }

    // Write the binary digits to stdout, starting from the first non-zero digit
    for (int i = 0, sum = 0; i < 32; i++)
    {
        sum += binary_digits[i];
        if (sum || i == 31)
        {
            char z = '0' + binary_digits[i];
            write(1, &z, 1);
            count++;
        }
    }

    return (count);
}

